diff --git a/Makefile.am b/Makefile.am
index f18bf4f..81e2ffe 100755
--- a/Makefile.am
+++ b/Makefile.am
@@ -311,6 +311,7 @@ WINDOWS_PROJECTS += src/windows/preamble_patcher_test.cc \
                     src/windows/shortproc.asm \
                     src/windows/auto_testing_hook.h

+if MUSL_NO
 ### Unittests
 TESTS += low_level_alloc_unittest
 WINDOWS_PROJECTS += vsprojects/low_level_alloc_unittest/low_level_alloc_unittest.vcproj
@@ -341,6 +342,7 @@ ATOMICOPS_UNITTEST_INCLUDES = src/base/atomicops.h \
 atomicops_unittest_SOURCES = src/tests/atomicops_unittest.cc \
                              $(ATOMICOPS_UNITTEST_INCLUDES)
 atomicops_unittest_LDADD = $(LIBSPINLOCK)
+endif MUSL_NO

 ### ------- stack trace

@@ -534,6 +540,8 @@ LIBS_TO_WEAKEN += libtcmalloc_minimal.la
 ## malloc_unittest_LDFLAGS = $(PTHREAD_CFLAGS)
 ## malloc_unittest_LDADD = $(PTHREAD_LIBS)

+if MUSL_NO
+
 TESTS += tcmalloc_minimal_unittest
 WINDOWS_PROJECTS += vsprojects/tcmalloc_minimal_unittest/tcmalloc_minimal_unittest.vcproj
 WINDOWS_PROJECTS += vsprojects/tmu-static/tmu-static.vcproj
@@ -741,6 +749,8 @@ thread_dealloc_unittest_CXXFLAGS = $(PTHREAD_CFLAGS) $(AM_CXXFLAGS) $(NO_BUILTIN
 thread_dealloc_unittest_LDFLAGS = $(PTHREAD_CFLAGS) $(TCMALLOC_FLAGS)
 thread_dealloc_unittest_LDADD = $(LIBTCMALLOC_MINIMAL) $(PTHREAD_LIBS)

+endif MUSL_NO
+
 ### Documentation
 dist_doc_DATA += doc/tcmalloc.html \
                  doc/overview.gif \
@@ -785,6 +795,7 @@ dist_doc_DATA += doc/overview.dot \
 # Like tcmalloc.cc, debugallocation.cc needs exceptions to fulfill its
 # API.  Luckily, we can reuse everything else from tcmalloc_minimal.

+if MUSL_NO
 if WITH_DEBUGALLOC

 lib_LTLIBRARIES += libtcmalloc_minimal_debug.la
@@ -850,7 +861,9 @@ debugallocation_test_LDADD = libtcmalloc_debug.la $(PTHREAD_LIBS)
 endif WITH_STACK_TRACE

 endif WITH_DEBUGALLOC
+endif MUSL_NO

+if MUSL_NO
 if !MINGW
 noinst_LTLIBRARIES += librun_benchmark.la
 librun_benchmark_la_SOURCES = \
@@ -885,6 +898,7 @@ binary_trees_shared_CXXFLAGS = $(PTHREAD_CFLAGS) $(AM_CXXFLAGS) $(NO_BUILTIN_CXX
 binary_trees_shared_LDFLAGS = $(PTHREAD_CFLAGS) $(TCMALLOC_FLAGS)
 binary_trees_shared_LDADD = libtcmalloc_minimal.la $(PTHREAD_LIBS)
 endif !MINGW
+endif MUSL_NO

 ### ------- tcmalloc (thread-caching malloc + heap profiler + heap checker)

@@ -969,6 +983,7 @@ LIBS_TO_WEAKEN += libtcmalloc.la

 ### Unittests

+if MUSL_NO
 TESTS += tcmalloc_unittest.sh$(EXEEXT)
 tcmalloc_unittest_sh_SOURCES = src/tests/tcmalloc_unittest.sh
 noinst_SCRIPTS += $(tcmalloc_unittest_sh_SOURCES)
@@ -1084,8 +1099,10 @@ sampling_test_CXXFLAGS = -g $(PTHREAD_CFLAGS) $(AM_CXXFLAGS)
 sampling_test_LDFLAGS = -g $(PTHREAD_CFLAGS) $(TCMALLOC_FLAGS)
 sampling_test_LDADD = $(LIBTCMALLOC) $(PTHREAD_LIBS)

+endif MUSL_NO
 endif WITH_HEAP_PROFILER_OR_CHECKER

+if MUSL_NO
 if WITH_HEAP_PROFILER

 TESTS += heap-profiler_unittest.sh$(EXEEXT)
@@ -1115,7 +1132,9 @@ simple_compat_test_LDFLAGS = $(TCMALLOC_FLAGS)
 simple_compat_test_LDADD = $(LIBTCMALLOC)

 endif WITH_HEAP_PROFILER
+endif MUSL_NO

+if MUSL_NO
 if WITH_HEAP_CHECKER

 TESTS += heap-checker_unittest.sh$(EXEEXT)
@@ -1156,6 +1175,7 @@ heap_checker_unittest_LDFLAGS = -g $(PTHREAD_CFLAGS) $(TCMALLOC_FLAGS)
 heap_checker_unittest_LDADD = $(LIBTCMALLOC) liblogging.la $(PTHREAD_LIBS)

 endif WITH_HEAP_CHECKER
+endif MUSL_NO

 ### Documentation (above and beyond tcmalloc_minimal documentation)
 if WITH_HEAP_PROFILER
@@ -1185,6 +1205,7 @@ LIBS_TO_WEAKEN += libtcmalloc_debug.la

 ### Unittests

+if MUSL_NO
 TESTS += tcmalloc_debug_unittest
 tcmalloc_debug_unittest_SOURCES = $(tcmalloc_unittest_SOURCES)
 tcmalloc_debug_unittest_CXXFLAGS = $(tcmalloc_unittest_CXXFLAGS) \
@@ -1213,10 +1234,14 @@ sampling_debug_test_CXXFLAGS = $(sampling_test_CXXFLAGS)
 sampling_debug_test_LDFLAGS = $(sampling_test_LDFLAGS)
 sampling_debug_test_LDADD = libtcmalloc_debug.la $(PTHREAD_LIBS)

+endif MUSL_NO
+
 endif WITH_HEAP_PROFILER_OR_CHECKER

 if WITH_HEAP_PROFILER

+if MUSL_NO
+
 TESTS += heap-profiler_debug_unittest.sh$(EXEEXT)
 heap_profiler_debug_unittest_sh_SOURCES = src/tests/heap-profiler_unittest.sh
 heap-profiler_debug_unittest.sh$(EXEEXT): $(top_srcdir)/$(heap_profiler_unittest_sh_SOURCES) \
@@ -1231,10 +1256,14 @@ heap_profiler_debug_unittest_CXXFLAGS = $(heap_profiler_unittest_CXXFLAGS)
 heap_profiler_debug_unittest_LDFLAGS = $(heap_profiler_unittest_LDFLAGS)
 heap_profiler_debug_unittest_LDADD = libtcmalloc_debug.la $(PTHREAD_LIBS)

+endif MUSL_NO
+
 endif WITH_HEAP_PROFILER

 if WITH_HEAP_CHECKER

+if MUSL_NO
+
 TESTS += heap-checker_debug_unittest.sh$(EXEEXT)
 heap_checker_debug_unittest_sh_SOURCES = src/tests/heap-checker_unittest.sh
 heap-checker_debug_unittest.sh$(EXEEXT): $(top_srcdir)/$(heap_checker_unittest_sh_SOURCES) \
@@ -1254,6 +1283,8 @@ heap_checker_debug_unittest_LDFLAGS = $(heap_checker_unittest_LDFLAGS)
 heap_checker_debug_unittest_LDADD = libtcmalloc_debug.la liblogging.la \
                                     $(PTHREAD_LIBS)

+endif MUSL_NO
+
 endif WITH_HEAP_CHECKER
 endif WITH_DEBUGALLOC

@@ -1295,6 +1326,7 @@ libprofiler_la_LDFLAGS = -export-symbols-regex $(CPU_PROFILER_SYMBOLS) \
 # Basically it's to work around systems where --rpath doesn't work right.
 LIBPROFILER = libstacktrace.la libprofiler.la

+if MUSL_NO
 ### Unittests
 TESTS += getpc_test
 #WINDOWS_PROJECTS += vsprojects/getpc_test/getpc_test.vcproj
@@ -1351,7 +1383,7 @@ profiler4_unittest_LDFLAGS = $(PTHREAD_CFLAGS)
 profiler4_unittest_LDADD = -lstacktrace -lprofiler $(PTHREAD_LIBS)
 # We depend on -lprofiler but haven't yet said how to build it.  Do so now.
 profiler4_unittest_DEPENDENCIES = $(LIBPROFILER)
-
+endif MUSL_NO

 ### Documentation
 dist_doc_DATA += doc/cpuprofile.html \
@@ -1436,10 +1436,11 @@ endif WITH_HEAP_PROFILER_OR_CHECKER


 # Do the weakening on some exported libtcmalloc symbols.
-install-exec-local: all-local
-all-local: $(LIBS_TO_WEAKEN)
-	for la in $(LIBS_TO_WEAKEN); do lib=".libs/`basename $$la .la`.a"; [ ! -f "$$lib" ] || $(WEAKEN) "$$lib"; done
+# install-exec-local: all-local
+# all-local: $(LIBS_TO_WEAKEN)
+# 	for la in $(LIBS_TO_WEAKEN); do lib=".libs/`basename $$la .la`.a"; [ ! -f "$$lib" ] || $(WEAKEN) "$$lib"; done

+TESTS =

 # This should always include $(TESTS), but may also include other
 # binaries that you compile but don't want automatically installed.
diff --git a/configure.ac b/configure.ac
index 3a99b85..17e7f2a 100644
--- a/configure.ac
+++ b/configure.ac
@@ -147,6 +147,8 @@ AC_PROG_CPP
 AM_CONDITIONAL(GCC, test "$GCC" = yes)   # let the Makefile know if we're gcc
 AM_PROG_CC_C_O      # shrug: autogen.sh suddenly needs this for some reason

+AM_CONDITIONAL(MUSL_NO, false)
+
 # Check if we have an objcopy installed that supports -W
 AC_CHECK_TOOL([OBJCOPY], [objcopy], [])
 AS_IF([test -n "$OBJCOPY"], [dnl
